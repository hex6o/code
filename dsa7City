/*There are flight paths between cities. If there is a flight between city A and city B then
there is an edge between the cities. The cost of the edge can be the time that flight take
to reach city B from A, or the amount of fuel used for the journey. Represent this as a
graph. The node can be represented by airport name or name of the city. Use adjacency
list representation of the graph or use adjacency matrix representation of the graph.
Check whether the graph is connected or not. Justify the storage representation used. */
#include<iostream>
#include<cstring>
using namespace std;

class flight{
    public:
    int dist[10][10],num;
    string cities[10];
    char ch;
    
    flight()
    {
        for(int i=0;i<10;i++)
        {
            for(int j=0;j<10;j++)
            {
                dist[i][j]==-1;
            }
        }
    }
    
    void add_city()
    {
        cout<<"\nEnter the number of cities: ";
        cin>>num;
        for(int i=1;i<=num;i++)
        {
            cout<<"\nEnter the name of city "<<i<<": ";
            cin>>cities[i];
        }
    }
    
    void route()
    {
        for(int i=1;i<=num;i++)
        {
            for(int j=i;j<=num;j++)
            {
                if(i==j)
                {
                    dist[i][j]=0;
                }
                else
                {
                    cout<<"\nis there path between cities "<<i<<" and "<<j<<"?(y/n): ";
                    cin>>ch;
                    if(ch=='y'||ch=='Y')
                    {
                        cout<<"\nEnter distance between cities: ";
                        cin>>dist[i][j];
                        dist[j][i]=dist[i][j];
                    }
                    else
                    {
                        dist[i][j]=dist[j][i]=-1;
                    }
                }
            }
        }
    }
    
    void display()
    {
        cout<<"\ndistance matrix:\n";
        for(int i=1;i<=num;i++)
        {
            cout<<"\t"<<cities[i];
        }
        cout<<endl;
        for(int i=1;i<=num;i++)
        {
            cout<<cities[i];
            for(int j=1;j<=num;j++)
            {
                cout<<"\t"<<dist[i][j];
            }
            cout<<"\n";
        }
    }
}f;

int main()
{
    int ch;
    do
    {
        cout<<"\n1.Enter data\n2.display routes\n3.exit\n";
        cin>>ch;
        switch(ch)
        {
            case 1:
                f.add_city();
                f.route();
                break;
            case 2:
                f.display();
                break;
            case 3:
                break;
        }
    }while(ch!=3);
    return 0;
}
