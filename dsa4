#include<iostream>
#include<string.h>
using namespace std;
typedef struct BST
{
    struct BST *right,*left;
    char word[20], meaning[20];
}node;
class dict{
public:
    node * root,*temp,*newnode;
    void create();
    void insert(node*,node*);
    int  search(node*);
    int  update(node*);
    void display(node*);
    node* del(node*,char[]);
    node* min(node*);
};
void dict::create()
{
    int ch;
    do{
        newnode = new node;
        newnode->left = newnode->right = NULL;
        cout<<"\nEnter KeyWord: ";
        cin>>newnode->word;
        cout<<"\nEnter Meaning of : ";
        cin>>newnode->meaning;
        if(root == NULL)
        {
            root = newnode;
            cout << "\nRoot of tree is: " << root->word << endl;
        }
        else
        {
            insert(root,newnode);
        }
        cout<<"\nPress 1 to Add more words: ";
        cin>>ch;
    }while (ch==1);    
}
void dict::insert(node * root, node* temp)
{
    if(strcmp(temp->word,root->word)<0)
    {
        if(root->left == NULL)
        {
            root->left = temp;
            cout << "\nLeft node of " << root->word << " is: " << temp->word << endl;
        }
        else
        {
            insert(root->left,temp);
        }
    }
    else
    {
        if(root->right == NULL)
        {
            root->right = temp;
            cout << "\nRight node of " << root->word << " is: " << temp->word << endl;
        }
        else
        {
            insert(root->right,temp);
        }
    }
}
void dict::display(node *temp)
{
    if (temp != NULL){
        display(temp->left);
        cout<<"\tWord : "<<temp->word<<"\t\tMeaning : "<<temp->meaning<<endl;
        display(temp->right);
    }
}
int dict::search(node *root)
{
    char w[20];
    int count = 0;
    cout<<"\nEnter KeyWord to search: ";
    cin>>w;
    while (root != NULL){
        count++;
        if(strcmp(w,root->word) == 0)
        {
            cout<<"No. of comparison: "<<count;
            return count;
        }
        else if(strcmp(w,root->word) < 0)
            root = root->left;
        else if(strcmp(w,root->word) > 0)
            root = root->right;
        else
            return 0;
    }
}
int dict::update(node *root)
{
    char w[20];
    cout<<"\nEnter KeyWord to update: ";
    cin>>w;
    while (root != NULL)
    {
        if(strcmp(w,root->word) == 0)
        {
            cout<<"\nEnter new Meaning of "<<w<<" : ";
            cin>>root->meaning;
            return 1;
        }
        else if(strcmp(w,root->word) < 0)
            root = root->left;
        else if(strcmp(w,root->word) > 0)
            root = root->right;
        else
            return 0;
    }
}
node* dict::del(node * root,char key[])
{
    node*temp;
    if (root == NULL)
    {
        cout<<"\nKeyWord not found!";
        return NULL;
    }
    if (strcmp(key, root->word) < 0)
    {
        root->left = del(root->left,key);
        return root;
    }
    if (strcmp(key, root->word) > 0)
    {
        root->right = del(root->right,key);
        return root;
    }
    if(root->left == NULL && root->right == NULL){
        temp = root;
        delete temp;
        cout<<"\n KEY DELETED";
        return NULL;
    }
    if(root->left == NULL)
    {
        temp = root;
        root = root->right;
        delete temp;
        cout<<"\n KEY DELETED";
        return root;
    }
    else if(root->right == NULL)
    {
        temp = root;
        root = root->left;
        delete temp;
        cout<<"\n KEY DELETED";
        return root;
    }
    temp = min(root->right);
    strcpy(root->word, temp->word);
    root->right = del(root->right,temp->word);
    return root;
}
node* dict::min(node * q)
{
    while (q->left != NULL)
    {
        q = q->left;
    }
    return q;
}
int main()
{
    int choice,count;
    dict obj;
    do{
        cout<<"\n\t1-Add Word\n\t2-Display\n\t3-No of comparison\n\t4-Updatae\n\t5-Delete\nEnter your choice:";
        cin>>choice;
        switch (choice)
        {
        case 1:
            obj.create();
            break;
        case 2:
            obj.display(obj.root);
            break;
        case 3:
            count = obj.search(obj.root);
            if(count == 1)
            {
                cout<<"\nKeyWord is Present!!"<<endl;
            }
            if(count==0)
            {
                cout<<"\nKeyWord is not Present!"<<endl;
            }
            
            break;
        case 4:
            count = obj.update(obj.root);
            if (count == 1)
            {
                cout<<"\nUpdated successfully"<<endl;;
            }
            if(count==0)
            {
                cout<<"\nKeyWord is not Present!"<<endl;
            }
            break;
        case 5:
            char key[15];
            cout<<"\nEnter keyWord to delete: ";
            cin>>key;
            obj.root=obj.del(obj.root,key);
            break;
        case 0:
            exit(0);
        }
    } while (choice!=0);
}





