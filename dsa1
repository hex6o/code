"""Consider telephone book database of N clients. Make use of a hash
table implementation to quickly look up clientâ€˜s telephone number. Make use of two
collision handling techniques and compare them using number of comparisons
required to find a set of telephone numbers."""
            
size = int(input("Enter the table size: "))
hash_table=[-1]*size
def linear_probing(telephone_no):
    index=telephone_no%size
    if(hash_table[index]==-1):
        hash_table[index]=(telephone_no)
        print("Record Inserted\n")
    else:
        while(hash_table[index]!=-1):
            index+=1
            if index==size:
                index=0
        hash_table[index]=(telephone_no)
        print("Record Inserted\n")     
def quadratic_probing(telephone_no):
    index=telephone_no%size
    if(hash_table[index]==-1):
        hash_table[index]=(telephone_no)
        print("Record Inserted\n")
    else:
        for i in range(size):
            index=(telephone_no%size + i*i)%size
            if(hash_table[index]==-1):
                hash_table[index]=(telephone_no)
                print("Record Inserted\n")
                break
def search(telephone_no):
    # count=1
    # index=telephone_no%size
    # if(hash_table[index]==telephone_no):
    #     print("Record found at index ", index)
    #     print("Required record: ",hash_table[index])
    #     print("No. of comparisons= ",count)
    # elif(hash_table[index]==-1):
    #     print("\nRecord Not Present")
    # elif(hash_table[index]!=telephone_no and hash_table[index]!=-1):
    #     index1=index
    #     index+=1
    #     count+=1
    #     while index!=index1:
    #         if(hash_table[index]==telephone_no):
    #             print("Element Found at index ",index)
    #             print("Required record: ",hash_table[index])
    #             print("No. of comparisons= ",count)
    #             break
    #         elif(index==size):
    #             index=0
    #             count+=1
    #         elif index==index1:
    #             print("Record Not Found")
    #             break
    #         else:
    #             index+=1
    #             count+=1
    #     if index==index1:
    #         print("Record not found")
    count=0
    for i in range(size):
        if(hash_table[i]==telephone_no):
            print("\nrecord found")
            count+=1
            print("\nno. of comparisons: ",count)
    else:
        print("\nnot found")
    
def display():
    if flag==0:
        print("\nNo Records to Display\n")
    if flag==1: 
        print("Index        Telephone number")
        for i in range(size):
            if (hash_table[i]!= -1):
                print(i, "        ",hash_table[i])
while(True):
    flag=1
    choice = int(input("1. Insert Record using Linear Probing\n2. Insert Record using Quadratic Probing\n3. Search Record\n4. Display Records\n5. Exit\nEnter your choice:"))
    if(choice==1):
        n = int(input("\nEnter no. of records to be inserted: "))
        for i in range(n):
            telephone_no= int(input("Enter the telephone_no: "))
            linear_probing(telephone_no)
    elif(choice==2):
        n = int(input("\nEnter no. of records to be inserted: "))
        for i in range(n):
            telephone_no= int(input("Enter the telephone_no: "))
            quadratic_probing(telephone_no)
    elif(choice==3):
        telephone_no=int(input("\nEnter telephone no to be searched: "))
        search(telephone_no)
    elif(choice==4):
        display()
    else:
        print("Program Exited")
        exit(0)
    
    

    

        
        
    
    
    



       
