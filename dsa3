#include <iostream>
using namespace std;
class BST
{
    typedef struct Btree
    {
        int data;
        struct Btree *right, *left;
    } node;
    node *root, *temp, *newnode;
public:
    void create();
    void insert(node *, node *);
    void display();
    void inorder(node *);
    void preorder(node *);
    void postorder(node *);
    void minimum();
    void search();
    void find(node *);
    void swap_pointer();
    void mirror(node *);
    void depth();
    int height(node *);
};
void BST::create()
{
    int ch;
    do
    {
        newnode = new node;
        newnode->left = NULL;
        newnode->right = NULL;
        cout << "\nEnter element to insert: ";
        cin >> newnode->data;
        if (root == NULL)
        {
        
            root = newnode;
            cout << "\nRoot of tree is: " << root->data << endl;
        }
        else
        {
            insert(root, newnode);
        }
        cout << "\nPress 1 to continue insertion 0 to stop: ";
        cin >> ch;
    } while (ch == 1);
}
void BST::insert(node *root, node *temp)
{
    if (temp->data > root->data)
    {
        if (root->right == NULL)
        {
            root->right = temp;
            cout << "\nRight node of " << root->data << " is: " << temp->data << endl;
        }
        else
        {
            insert(root->right, temp);
        }
    }
    else
    {
        if (root->left == NULL)
        {
            root->left = temp;
            cout << "\nLeft node of " << root->data << " is: " << temp->data << endl;
        }
        else
        {
            insert(root->left, temp);
        }
    }
}
void BST::display()
{
    cout<<"\nInorder: ";
    inorder(root);
    cout<<"\nPreorder: ";
    preorder(root);
    cout<<"\nPostorder: ";
    postorder(root);
}
void BST::inorder(node *temp)
{
    if (temp != NULL)
    {
        inorder(temp->left);
        cout << temp->data << "    ";
        inorder(temp->right);
    }
}
void BST::preorder(node *temp)
{
    if (temp != NULL)
    {
        cout << temp->data << "    ";
        preorder(temp->left);
        preorder(temp->right);
    }
}
void BST::postorder(node *temp)
{
    if (temp != NULL)
    {
        postorder(temp->left);
        postorder(temp->right);
        cout << temp->data << "    ";
    }
}
void BST::minimum()
{
    temp = root;
    while (temp->left != NULL)
    {
        temp = temp->left;
    }
    cout << "\nMinimum value Node is: " << temp->data << endl;
}
void BST::search()
{
    find(root);
}
void BST::find(node *temp)
{
    int key;
    cout << "\nEnter element to search in BST: ";
    cin >> key;
    int flag = 0;
    while (temp != NULL)
    {
        if (temp->data == key)
        {   
            flag=1;
            cout << key << " is Found!" << endl;
            break;
        }
        else if (key > temp->data)
        {
            temp = temp->right;
        }
        else
        {
            temp = temp->left;
        }
    }
    if (flag != 1)
    {
        cout << "\nKey is not found!";
    }
}
void BST::swap_pointer()
{
    cout<<"Before swaping inorder: ";
    inorder(root);
    mirror(root);
    cout<<"\nAfter swaping inorder: ";
    inorder(root);
    mirror(root);
}
void BST::mirror(node *temp)
{
   if (temp != NULL)
    {
        mirror(temp->left);
        mirror(temp->right);
        node *swap = temp->left;
        temp->left = temp->right;
        temp->right = swap;
    }
}
void BST::depth()
{
    cout<<"Height: "<<height(root);
}
int BST:: height(node *temp)
{
    if (temp == NULL)
    {
        return 0;
    }
    else
    {
        int lh = height(temp->left);
        int rh = height(temp->right);
        return (1+max(lh, rh)) ;
    }
}
int main()
{
    int choice;
    BST obj;
    do
    {
        cout << "\n1-Insert\n2-Display\n3-Minimum Node\n4-Search Node\n5-Mirror Tree\n6-Height\n0-Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;
        switch (choice)
        {
        case 1:
            obj.create();
            break;
        case 2:
            obj.display();
            break;
        case 3:
            obj.minimum();
            break;
        case 4:
            obj.search();
            break;
        case 5:
            obj.swap_pointer();
            break;
        case 6:
            obj.depth();
            break;
        case 0:
            exit(0);
            break;
        }
    } while (choice != 0);
}






