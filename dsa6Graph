//BFS DFS
#include<iostream>
using namespace std;
class Bfs_Dfs
{
    int mat[10][10];
    int qu[10],front,rear,visit_qu[10];
    int stk[10],top,visit_stk[10];
    int v,e;
    
    public:
        Bfs_Dfs()
        {
            for(int i=0;i<10;i++)
            {
                for(int j=0;j<10;j++)
                {
                    mat[i][j]=0;
                    qu[i]=0;
                    stk[i]=0;
                    visit_stk[i]=0;
                    visit_qu[i]=0;
                }
            }
        }
        
        void create()
        {
            int x,y;
            cout<<"\nEnter no. of vertice: ";
            cin>>v;
            cout<<"\nEnter no. of edges: ";
            cin>>e;
            for(int i=0;i<e;i++)
            {
                cout<<"\nEnter the nodes for edge "<<i+1<<": ";
                cin>>x>>y;
                mat[x][y]=mat[y][x]=1;
            }
        }
        
        void display()
        {
            cout<<"\nmatrix representation for given graph is:\n ";
            for(int i=0;i<e;i++)
            {
                cout<<" "<<i;
            }
            cout<<endl;
            
            for(int i=0;i<e;i++)
            {
                cout<<i;
                for(int j=0;j<e;j++)
                {
                    cout<<" "<<mat[i][j];
                }
                cout<<endl;
            }
        }
        
        void Bfs()
        {
            front=rear=0;
            int v_bfs;
            cout<<"\nEnter initial vertex for BFS: ";
            cin>>v_bfs;
            cout<<"\nThe BFS for given graph is: "<<v_bfs<<" ";
            visit_qu[v_bfs]=1;
            int k=1;
            while(k<v)
            {
                for(int i=0;i<v;i++)
                {
                    if(mat[v_bfs][i]==1 && visit_qu[i]!=1)
                    {
                        visit_qu[i]=1;
                        qu[rear++]=i;
                    }
                }
                v_bfs=qu[front++];
                cout<<v_bfs<<" ";
                k++;
            }
        }
        
        void Dfs()
        {
            top=0;
            int v_dfs;
            cout<<"\nEnter initial vertex for DFS: ";
            cin>>v_dfs;
            cout<<"\nThe DFS for given graph is: "<<v_dfs<<" ";
            visit_stk[v_dfs]=1;
            int k=1;
            while(k<v)
            {
                for(int i=v;i>=1;i--)
                {
                    if(mat[v_dfs][i]==1 && visit_stk[i]!=1)
                    {
                        visit_stk[i]=1;
                        stk[top]=i;
                        top++;
                    }
                }
                v_dfs=stk[--top];
                cout<<v_dfs<<" ";
                k++;
            }
        }
};

int main()
{
    Bfs_Dfs obj;
    int ch;
    do
    {
        cout<<"\n1.create\n2.display\n3.BFS\n4.DFS\nexit\nenter your chice\n";
        cin>>ch;
        switch(ch)
        {
            case 1:
                obj.create();
                break;
            case 2:
                obj.display();
                break;
            case 3:
                obj.Bfs();
                break;
            case 4:
                obj.Dfs();
                break;
            case 5:
                break;
        }
    }while(ch!=5);
    return 0;
    
    
    
    
}
